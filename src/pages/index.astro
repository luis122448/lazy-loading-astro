---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<Layout title="Lazing Loading">
  <main class="w-auto mx-auto flex flex-col space-y-6 py-6 px-6 h-screen">
    <header
      class="mx-auto text-xl justify-center text-center font-semibold dark:text-white"
    >
      <p>Lazing Loading</p>
    </header>
    <section class="flex flex-col space-y-4 justify-center">
      <p class="mx-auto w-96 dark:text-white">
        En este ejemplo se muestra como se puede hacer el lazy loading de
        imagenes para que no se carguen todas las imagenes al mismo tiempo, sino
        que se carguen cuando el usuario las necesite.
      </p>
      <div
        class="mx-auto my-auto w-96 flex flex-row sapce-x-4 justify-around dark:text-white"
      >
        <button
          id="add-image"
          class="mx-auto w-36 bg-sky-700 hover:bg-sky-800 py-1 px-3 rounded-full text-white font-semibold"
        >
          Adicionar
        </button>
        <button
          id="reset"
          class="mx-auto w-36 bg-red-700 hover:bg-red-800 py-1 px-3 rounded-full text-white font-semibold"
        >
          Reiniciar
        </button>
      </div>
      <div class="mx-auto w-96 flex flex-col justify-start dark:text-white">
        <p>
          Imagenes Solicitadas : <span id="numberImage" class="font-semibold"
          ></span>
        </p>
        <p>
          Imagenes Renderizadas : <span id="renderImage" class="font-semibold"
          ></span>
        </p>
      </div>
    </section>
    <section class="mx-auto w-96 space-y-6 max-h-[500px] overflow-auto">
      <article
        id="container-image"
        class="flex flex-col justify-center mx-auto w-96 h-auto items-center space-y-6"
      >
      </article>
    </section>
    <footer class="flex-1 flex flex-col justify-end">
      <hr class="my-2 border-gray-200 mx-auto dark:border-gray-700" />
      <span
        class="block text-sm text-gray-500 text-center dark:text-gray-400 pb-2"
        >Â© 2023 <a
          href="https://www.linkedin.com/in/luis-antonio-calvo-quispe-57a33b229/"
          class="font-medium text-blue-600 underline dark:text-blue-500 hover:no-underline"
		  target="_blank"
          >Luis C.</a
        > All Rights Reserved.</span
      >
    </footer>
  </main>
</Layout>

<style></style>
<script>
  import { registerImage, renderImage, resetImage } from "../scripts/lazy.ts";

  const maximo = 100;
  const minimo = 1;
  const random = () => Math.floor(Math.random() * (maximo - minimo)) + minimo;

  let numberImage = 0;
  let renderImageLocal = 0;

  renderImage.subscribe((newValue: number) => {
    renderImageLocal = newValue;
    pRenderImage();
  });

  const pNumberImage = () => {
    const p = document.getElementById("numberImage");
    if (p) {
      p.textContent = numberImage.toString();
    }
  };

  const pRenderImage = () => {
    const p = document.getElementById("renderImage");
    if (p) {
      p.textContent = renderImageLocal.toString();
    }
  };

  const createImageNode = (): HTMLDivElement => {
    const container = document.createElement("div");
    container.className = "w-[160px] h-[160px] mx-auto rounded-xl bg-slate-700";
    const image = document.createElement("img");
    image.className = "w-[160px] h-[160px] object-cover";
    image.width = 160;
    image.height = 160;
    image.dataset.src = `https://randomfox.ca/images/${random()}.jpg`;
    container.appendChild(image);
    numberImage++;
    console.log(numberImage);
    pNumberImage();
    return container;
  };

  const actionAddImage = () => {
    const newImage = createImageNode();
    const container = document.getElementById("container-image");
    registerImage(newImage);
    container?.appendChild(newImage);
  };

  const clearImage = () => {
    const container = document.getElementById("container-image");
    while (container?.firstChild) {
      container.removeChild(container.firstChild);
    }
    resetImage();
    numberImage = 0;
    pNumberImage();
  };

  const addImage = document.getElementById("add-image");
  addImage?.addEventListener("click", actionAddImage);

  const reset = document.getElementById("reset");
  reset?.addEventListener("click", clearImage);
</script>
